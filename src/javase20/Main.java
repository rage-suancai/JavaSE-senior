package javase20;

/**
 * 反射
 * 注意: 本章节涉及到JVM相关底层原理 难度会有一些大
 *
 * 反射就是把java类中的各个成分映射成一个个的java对象 即在运行状态中 对于任意的一个类 都能够知道这个类所有的属性和方法
 * 对于任意一个对象 都能调用它的任意一个方法和属性 这种动态获取信息及动态调用对象方法的功能叫java的反射机制
 *
 * 简而言之 我们可以通过反射机制 获取到类的一些属性 包括类里面有哪些字段 有哪些方法 继承自哪个类 甚至还能获取到泛型 它的权限非常高 慎重使用
 *
 * java类加载机制
 * 在学习java的反射机制之前 我们需要先了解一下类型的加载机制 一个类是如何被加载和使用的:
 *
 *                                     ---------------------------连接Linking----------------------------
 *                  加载                     验证                        准备                      解析
 *               (Loading) ----------> (Verification) ----------> (Preparation) ----------> (Resolution)
 *                                                                                               |
 *                                                                                               |
 *                                                                                               |
 *                                                                                               |
 *                                      卸载                   使用                    初始化      |
 *                                  (Unloading) <---------- (Using) <---------- (Initialization)
 *
 * 在java程序启动时 JVM会将一部分(class文件)先加载 (并不是所有的类都会在一开始加载) 通过ClassLoader将类加载 在加载过程中 会将类信息提取出来
 * (存放在元空间中 JDK1.8之前存放在永久代) 同时也会生成一个Class对象存放在内存(堆内存) 注意: 此Class对象只会存在一个 与加载的类唯一对应
 *
 * 为了方便各位小伙伴理解 你们就直接理解为默认情况下(仅使用类加载器) 每个类都有且只有一个唯一的Class对象存放在JVM中
 * 我们无论通过上面方式访问 都是始终是那一个对象 Class对象中包含我们类的一些信息 包括里面有哪些方法 哪些变量等等
 */
public class Main {

    public static void main(String[] args) {

    }

}
